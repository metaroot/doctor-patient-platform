{"version":3,"sources":["components/Prescriptions.js","components/Navbar.js","components/Report.js","components/PatientHome.js","components/App.js","serviceWorker.js","index.js","logo.svg"],"names":["BasicUsage","useDisclosure","isOpen","onOpen","onClose","Button","onClick","Modal","variantColor","mr","variant","Prescriptions","Component","Navbar","Breadcrumb","className","bg","width","height","spacing","color","href","process","ToastExample","toast","useToast","title","description","status","duration","isClosable","Report","props","state","entries","symp","timeDuration","timeUnit","prevMeds","submitSymp","bind","e","preventDefault","entry","this","prevEntries","push","setState","id","currentEntries","splice","style","display","map","Tag","IconButton","icon","deleteSymp","indexOf","Select","placeholder","onChange","target","value","NumberInput","defaultValue","min","max","Input","paddingTop","PatientHome","App","history","createHistory","basename","ThemeProvider","CSSReset","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.daf79044.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { useDisclosure, Text } from \"@chakra-ui/core\";\n\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n  } from \"@chakra-ui/core\";\nimport Navbar from './Navbar';\n\n\n  function BasicUsage() {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    return (\n      <>\n        <Button onClick={onOpen}>Open Modal</Button>\n  \n        <Modal isOpen={isOpen} onClose={onClose}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Modal Title</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                Yo\n              {/* <Lorem count={2} /> */}\n            </ModalBody>\n  \n            <ModalFooter>\n              <Button variantColor=\"blue\" mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button variant=\"ghost\">Secondary Action</Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </>\n    );\n  }\n\nclass Prescriptions extends Component {\n    render() {\n        return (\n            <>\n                <Navbar/>\n                <BasicUsage/>\n            </>\n        )\n    }\n}\n\nexport default Prescriptions","import {\n    Breadcrumb,\n    BreadcrumbItem,\n    BreadcrumbLink,\n    BreadcrumbSeparator,\n  } from \"@chakra-ui/core\";\nimport React, { Component} from 'react';\nimport '../styles/Navbar.css';\nimport Report from './Report'\nimport Prescriptions from './Prescriptions'\nimport { Link } from \"@reach/router\"\n\n\n\n  class Navbar extends Component {\n      render() {\n          return (\n            <Breadcrumb className=\"navbar\" bg=\"#FEFCBF\" width=\"100%\" height=\"100px\" spacing=\"20px\">\n                <BreadcrumbItem>\n                    <BreadcrumbLink className=\"link\" color=\"#5F370E\" href={process.env.PUBLIC_URL + '/'}>সেবা সম্পর্কে</BreadcrumbLink>\n                </BreadcrumbItem>\n\n                <BreadcrumbItem>\n                    <BreadcrumbLink className=\"link\" color=\"#5F370E\" href={process.env.PUBLIC_URL + \"/prescriptions\"}>প্রেসক্রিপশন সমূহ</BreadcrumbLink>\n                </BreadcrumbItem>\n\n                <BreadcrumbItem>\n                    <BreadcrumbLink className=\"link\" color=\"#5F370E\" href={process.env.PUBLIC_URL + \"/report\"}>রিপোর্ট তৈরি করুন</BreadcrumbLink>\n                </BreadcrumbItem>\n\n                <BreadcrumbItem>\n                    <BreadcrumbLink className=\"link\" color=\"#5F370E\" href=\"#\">লগ আউট</BreadcrumbLink>\n                </BreadcrumbItem> \n            </Breadcrumb>              \n          )\n      }\n  }\n  \n  export default Navbar","import React, { Component } from 'react';\nimport '../styles/Report.css';\nimport { Text } from \"@chakra-ui/core\";\nimport  Navbar from './Navbar'\nimport { useToast } from \"@chakra-ui/core\";\nimport { Select } from \"@chakra-ui/core\";\nimport { IconButton } from \"@chakra-ui/core\";\nimport { Tag, TagIcon, TagLabel, TagCloseButton } from \"@chakra-ui/core\";\nimport {\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    NumberIncrementStepper,\n    NumberDecrementStepper,\n} from \"@chakra-ui/core\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { Input } from \"@chakra-ui/core\";\nimport { Button } from \"@chakra-ui/core\";\n\nfunction ToastExample() {\n    const toast = useToast();\n    return (\n      <Button\n        variantColor=\"yellow\"\n        onClick={() =>\n          toast({\n            title: \"রিপোর্ট জমা হয়েছে\",\n            description: \"অতিসত্বর একজন ইন্টার্ন কিংবা প্রফেশনাল ডাক্তার আপনার রিপোর্টটি দেখে দিবেন। সেটি ফিরে এলে আপনার নোটিফিকেশন ট্যাবে দেখতে পাবেন  \",\n            status: \"success\",\n            duration: 9000,\n            isClosable: true,\n          })\n        }\n      >\n        প্রেরণ করুন\n      </Button>\n    );\n}\n\nclass Report extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            entries: [],\n            symp: '',\n            timeDuration: 1,\n            timeUnit: '',\n            prevMeds: '',\n        };\n        this.submitSymp = this.submitSymp.bind(this);\n    }\n\n    submitSymp(e) {\n        e.preventDefault();\n        const entry = {\n            symp: this.state.symp,\n            timeDuration: this.state.timeDuration,\n            timeUnit: this.state.timeUnit,\n            prevMeds: this.state.prevMeds\n        }\n        let prevEntries = this.state.entries\n\n        prevEntries.push(entry);\n        \n        this.setState({\n            symp: '',\n            timeDuration: 1,\n            timeUnit: '',\n            prevMeds: '',\n            entries:  prevEntries\n        })     \n    }\n\n    deleteSymp(id) {\n        let currentEntries = this.state.entries\n        currentEntries.splice(id, 1)\n        this.setState({\n            entries: currentEntries\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"report-form\">\n                <Navbar/>\n                <div className=\"make-report\" style={{display: 'flex'}}>\n                    {/* <img className=\"iron-man\" style={{paddingTop: \"35px\", paddingBottom:\"10px\", paddingRight: \"20px\", width: \"70px\"}} src=\"https://media0.giphy.com/media/7OEje1TMS7hCw/giphy.gif?cid=ecf05e472714886e80a908d2ae926c16fbb807cf8733e41a&rid=giphy.gif\"></img> */}\n                    <p className=\"make-report-text\">আপনার মেডিকেল রিপোর্ট তৈরি করুন</p>\n                </div>\n                    \n                {this.state.entries ? (this.state.entries.map((entry) => (\n                    <div className=\"symptom\">\n                        <div className=\"symptom-text-div\">\n                            <p className=\"symptom-text\">রোগ:</p>\n                            <Tag variantColor=\"yellow\">\n                                <TagLabel>{entry.symp}</TagLabel>\n                            </Tag>\n                        </div>\n                        \n                        <div className=\"duration-text-div\">\n                            <p className=\"duration-text\">সময়কাল:</p>\n                            <Tag variantColor=\"cyan\">\n                                <TagLabel>{entry.timeDuration}</TagLabel>\n                            </Tag>\n                            <div className=\"duration\">\n                                <Tag variantColor=\"red\">\n                                    <TagLabel>{entry.timeUnit}</TagLabel>\n                                </Tag>\n                            </div>\n                        </div>\n                        <div className=\"medicine-text-div\">\n                            <p className=\"medicine-text\">ওষুধ:</p>\n                            <Tag variantColor=\"green\">\n                                <TagLabel>{entry.prevMeds}</TagLabel>\n                            </Tag>\n                        </div>\n                        <IconButton className=\"delete-symp\" icon=\"delete\" variantColor=\"yellow\" onClick={() => this.deleteSymp(this.state.entries.indexOf(entry))} />\n                    </div>    \n                ))) : (\n                    <div />\n                )}\n\n                <div className=\"symptom\">\n                    <div className=\"symptom-text-div\">\n                        <p className=\"symptom-text\">রোগ:</p>\n                        <Select\n                        className=\"symptom-select\"\n                        placeholder=\"রোগ নির্বাচন করুন\"\n                        onChange={e => this.setState({ symp: e.target.value })}\n                        >\n                            <option value=\"জ্বর\">জ্বর</option>\n                            <option value=\"কাশি\">কাশি</option>\n                            <option value=\"মাথাব্যথা\">মাথাব্যথা</option>\n                        </Select>\n                    </div>\n                    \n                    <div className=\"duration-text-div\">\n                        <p className=\"duration-text\">সময়কাল:</p>\n                        <NumberInput\n                        className=\"number-input\" \n                        defaultValue={1} \n                        min={1} \n                        max={366} \n                        width=\"100px\"\n                        onChange={value => this.setState({timeDuration: value})}\n                        >\n                            <NumberInputField />\n                            <NumberInputStepper>\n                                <NumberIncrementStepper />\n                                <NumberDecrementStepper />\n                            </NumberInputStepper>\n                        </NumberInput>\n                        <div className=\"duration\">\n                            <Select\n                            className=\"duration-select\" \n                            placeholder=\"সময়কাল\"\n                            onChange={e => this.setState({ timeUnit: e.target.value })}\n                            >\n                                <option value=\"দিন\">দিন</option>\n                                <option value=\"সপ্তাহ\">সপ্তাহ</option>\n                                <option value=\"মাস\">মাস</option>\n                                <option value=\"year\">বছর</option>\n                            </Select>\n                        </div>\n                    </div>\n                    <div className=\"medicine-text-div\">\n                        <p className=\"medicine-text\">ওষুধ:</p>\n                        <Input\n                        placeholder=\"পূর্বে সেবনকৃত ওষুধ\"\n                        onChange={e => this.setState({ prevMeds: e.target.value })}\n                        />\n                    </div>\n                    <IconButton className=\"add-symp\" icon=\"add\" variantColor=\"yellow\" onClick={this.submitSymp}/>\n                </div>\n                \n                <div className=\"buttons\" style={{paddingTop: \"20px\"}}>\n                    <div className=\"submit-button\">\n                        <ToastExample/>\n                    </div> \n                </div>       \n            </div>\n        )\n    }\n}\n  \n  export default Report","import React, { Component } from 'react';\nimport '../styles/Report.css';\nimport { Text } from \"@chakra-ui/core\";\nimport  Navbar from './Navbar'\n\nclass PatientHome extends Component {\n    render() {\n        return (\n            <Navbar/>\n        )\n    }\n}\n\nexport default PatientHome","import React from 'react';\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport logo from '../logo.svg';\nimport '../styles/App.css';\nimport Report from './Report'\nimport PatientHome from './PatientHome'\nimport Prescriptions from './Prescriptions'\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\"\nimport createHistory from 'history/createBrowserHistory';\n\n\n\nfunction App() {\n  const history = createHistory({\n    basename: process.env.PUBLIC_URL,\n  });\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Router history={history} basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path='/' component={PatientHome}/>\n          <Route path='/report' component={Report}/>\n          <Route path='/prescriptions' component={Prescriptions}/>\n        </Switch>\n    </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}