{"version":3,"sources":["logo.svg","components/Disease.js","components/Report.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Disease","className","Select","placeholder","value","NumberInput","defaultValue","min","max","width","Input","Component","ToastExample","toast","useToast","Button","variantColor","onClick","title","description","status","duration","isClosable","Report","props","state","entries","sympSet","symp","timeDuration","timeUnit","med","submitSymp","bind","e","preventDefault","prevEntries","this","push","setState","style","display","paddingTop","paddingBottom","paddingRight","src","map","App","ThemeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAAAA,EAAOC,QAAU,IAA0B,kC,iOCyD5BC,E,uKArCP,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,gBAAb,uBACA,kBAACC,EAAA,EAAD,CAAQD,UAAU,iBAAiBE,YAAY,gGAC3C,4BAAQC,MAAM,WAAd,4BACA,4BAAQA,MAAM,WAAd,4BACA,4BAAQA,MAAM,WAAd,4DAIR,yBAAKH,UAAU,qBACX,uBAAGA,UAAU,iBAAb,yCACA,kBAACI,EAAA,EAAD,CAAaJ,UAAU,eAAeK,aAAc,EAAGC,IAAK,EAAGC,IAAK,IAAKC,MAAM,SAC3E,kBAACJ,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,QAGR,yBAAKJ,UAAU,YACX,kBAACC,EAAA,EAAD,CAAQD,UAAU,kBAAkBE,YAAY,sBAAhD,OACI,4BAAQC,MAAM,WAAd,wCACA,4BAAQA,MAAM,WAAd,sBACA,4BAAQA,MAAM,WAAd,yBAIZ,yBAAKH,UAAU,qBACX,uBAAGA,UAAU,iBAAb,6BACA,kBAACS,EAAA,EAAD,CAAOP,YAAY,mH,GAhCjBQ,a,QCDtB,SAASC,IACL,IAAMC,EAAQC,cACd,OACE,kBAACC,EAAA,EAAD,CACEC,aAAa,SACbC,QAAS,kBACPJ,EAAM,CACJK,MAAO,+FACPC,YAAa,wpBACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,MARlB,iE,IAyFWC,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GACTC,QAAS,CACLC,KAAM,GACNC,aAAc,EACdC,SAAU,MACVC,IAAK,KAGb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAZH,E,uDAeRC,GACPA,EAAEC,iBACF,IAAIC,EAAcC,KAAKZ,MAAMC,QAS7BU,EAAYE,KAPG,CACXV,KAAM,KACNC,aAAc,EACdC,SAAU,OACVC,IAAK,SAKTM,KAAKE,SAAS,CACZb,QAASU,EACTT,QAAS,CACPC,KAAM,GACNC,aAAc,EACdC,SAAU,MACVC,IAAK,Q,+BAMT,OACI,yBAAK9B,UAAU,eACX,yBAAKA,UAAU,cAAcuC,MAAO,CAACC,QAAS,SAC1C,yBAAKxC,UAAU,WAAWuC,MAAO,CAACE,WAAY,OAAQC,cAAc,OAAQC,aAAc,OAAQnC,MAAO,QAASoC,IAAI,8HACtH,uBAAG5C,UAAU,oBAAb,2KAEJ,kBAAC,EAAD,MAECoC,KAAKZ,MAAMC,QAAQoB,KAAI,kBACpB,kBAAC,EAAD,SAGJ,yBAAK7C,UAAU,UAAUuC,MAAO,CAACE,WAAY,SACzC,yBAAKzC,UAAU,aAAauC,MAAO,CAACI,aAAc,SAC9C,kBAAC7B,EAAA,EAAD,CACIC,aAAa,SACbC,QAAWoB,KAAKL,YAFpB,mEAOJ,yBAAK/B,UAAU,iBACX,kBAACW,EAAD,a,GAhEHD,a,gBCpBNoC,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1491a63e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport '../styles/Report.css';\nimport { Text } from \"@chakra-ui/core\";\nimport { useToast } from \"@chakra-ui/core\";\nimport { Select } from \"@chakra-ui/core\";\nimport {\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    NumberIncrementStepper,\n    NumberDecrementStepper,\n} from \"@chakra-ui/core\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { Input } from \"@chakra-ui/core\";\nimport { Button } from \"@chakra-ui/core\";\n\n\n\nclass Disease extends Component {\n    render() {\n        return (\n            <div className=\"symptom\">\n                <div className=\"symptom-text-div\">\n                    <p className=\"symptom-text\">রোগ:</p>\n                    <Select className=\"symptom-select\" placeholder=\"রোগ নির্বাচন করুন\">\n                        <option value=\"option1\">জ্বর</option>\n                        <option value=\"option2\">কাশি</option>\n                        <option value=\"option3\">মাথাব্যথা</option>\n                    </Select>\n                </div>\n                \n                <div className=\"duration-text-div\">\n                    <p className=\"duration-text\">সময়কাল:</p>\n                    <NumberInput className=\"number-input\" defaultValue={1} min={1} max={366} width=\"100px\">\n                        <NumberInputField />\n                        <NumberInputStepper>\n                            <NumberIncrementStepper />\n                            <NumberDecrementStepper />\n                        </NumberInputStepper>\n                    </NumberInput>\n                    <div className=\"duration\">\n                        <Select className=\"duration-select\" placeholder=\"দিন\">yarn\n                            <option value=\"option2\">সপ্তাহ</option>\n                            <option value=\"option3\">মাস</option>\n                            <option value=\"option3\">বছর</option>\n                        </Select>\n                    </div>\n                </div>\n                <div className=\"medicine-text-div\">\n                    <p className=\"medicine-text\">ওষুধ:</p>\n                    <Input placeholder=\"পূর্বে সেবনকৃত ওষুধ\"/>\n                </div>\n            </div>      \n        )\n    }\n}\n\nexport default Disease;","import React, { Component } from 'react';\nimport '../styles/Report.css';\nimport Disease from './Disease.js'\nimport { Text } from \"@chakra-ui/core\";\nimport { useToast } from \"@chakra-ui/core\";\nimport { Select } from \"@chakra-ui/core\";\nimport {\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    NumberIncrementStepper,\n    NumberDecrementStepper,\n} from \"@chakra-ui/core\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { Input } from \"@chakra-ui/core\";\nimport { Button } from \"@chakra-ui/core\";\n\nfunction ToastExample() {\n    const toast = useToast();\n    return (\n      <Button\n        variantColor=\"yellow\"\n        onClick={() =>\n          toast({\n            title: \"রিপোর্ট জমা হয়েছে\",\n            description: \"অতিসত্বর একজন ইন্টার্ন কিংবা প্রফেশনাল ডাক্তার আপনার রিপোর্টটি দেখে দিবেন। সেটি ফিরে এলে আপনার নোটিফিকেশন ট্যাবে দেখতে পাবেন  \",\n            status: \"success\",\n            duration: 9000,\n            isClosable: true,\n          })\n        }\n      >\n        প্রেরণ করুন\n      </Button>\n    );\n}\n\nclass Report extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            entries: [],\n            sympSet: {\n                symp: '',\n                timeDuration: 1,\n                timeUnit: 'day',\n                med: ''\n            }\n        };\n        this.submitSymp = this.submitSymp.bind(this);\n    }\n\n    submitSymp(e) {\n        e.preventDefault();\n        let prevEntries = this.state.entries;\n\n        let unitSymp = {\n            symp: 'yo',\n            timeDuration: 5,\n            timeUnit: 'year',\n            med: 'napa'\n        }\n        \n        prevEntries.push(unitSymp);\n    \n        this.setState({\n          entries: prevEntries,\n          sympSet: {\n            symp: '',\n            timeDuration: 1,\n            timeUnit: 'day',\n            med: ''\n          }\n        });     \n    }\n    \n    render() {\n        return (\n            <div className=\"report-form\">\n                <div className=\"make-report\" style={{display: 'flex'}}>\n                    <img className=\"iron-man\" style={{paddingTop: \"35px\", paddingBottom:\"10px\", paddingRight: \"20px\", width: \"70px\"}} src=\"https://media0.giphy.com/media/7OEje1TMS7hCw/giphy.gif?cid=ecf05e472714886e80a908d2ae926c16fbb807cf8733e41a&rid=giphy.gif\"></img>\n                    <p className=\"make-report-text\">আপনার মেডিকেল রিপোর্ট তৈরি করুন</p>\n                </div>\n                <Disease/>\n\n                {this.state.entries.map(() => (\n                    <Disease/>\n                ))}\n                \n                <div className=\"buttons\" style={{paddingTop: \"20px\"}}>\n                    <div className=\"add-button\" style={{paddingRight: \"10px\"}}>\n                        <Button \n                            variantColor=\"yellow\"\n                            onClick = {this.submitSymp}\n                        >\n                                আরো যোগ করুন\n                        </Button>\n                    </div>\n                    <div className=\"submit-button\">\n                        <ToastExample/>\n                    </div> \n                </div>       \n            </div>\n        )\n    }\n}\n  \n  export default Report","import React from 'react';\nimport logo from '../logo.svg';\nimport '../styles/App.css';\nimport Header from './Header'\nimport Report from './Report'\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\"\n\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Report/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}